<?xml version="1.0"?>
<launch>
  <node pkg="suturo_resources" name="base_scan_limiter" type="base_scan_opening_limiter.py" output="screen"/>
  <remap from="/hsrb/base_scan" to="/hsrb/base_scan_unlimited"/>

  <arg name="namespace" default="hsrb"/>
  <arg name="debug" default="false"/>
  <arg name="gui" default="true" />
  <arg name="suturo_rviz" default="false"/>
  <arg name="gazebo_visualization" default="false" />
  <arg name="use_manipulation" default="true" />
  <arg name="use_navigation" default="true" />
  <arg name="use_perception" default="true" />
  <arg name="use_task" default="true" />
  <arg name="use_teleop" default="true" />
  <arg name="use_web" default="false" />
  <arg name="use_laser_odom" default="true" />
  <arg name="paused" default="true" />
  <arg name="fast_physics" default="false" />
  <arg name="robot_name" default="$(optenv ROBOT_NAME hsrb)" />

  <arg unless="$(arg fast_physics)" name="world_suffix" value=""/>
  <arg     if="$(arg fast_physics)" name="world_suffix" value="_fast"/>

  <arg name="world" default="empty.world" />
  <arg name="map_name" default="empty/map.yaml" />
  <arg name="gazebo" default="false" />

  <arg name="map_server" default="true" />
  <arg name="publish_planning_hsr" default="true" />

  <arg name="publish_environment" default="true" />
  <arg name="env_model_yaml" default="rw_lab_1.yaml" />

  <arg name="show_rooms" default="true"/>

  <arg name="publish_robot_description" default="false" />

  <arg name="run_snap_map" default="true" />

  <!-- where to spawn the robot-->
  <arg name="robot_spawn_pose_x" default="0" />
  <arg name="robot_spawn_pose_y" default="0" />
  <arg name="robot_spawn_pose_z" default="0" />
  <arg name="robot_spawn_rotation" default="0" />


  <group if="$(eval arg('run_snap_map') == true)">
    <node pkg="snap_map_icp" type="snap_map_icp" name="snap_map_icp" output="screen">
      <!-- remap topics for map and laser scans -->
      <remap from="~base_scan" to="/hsrb/base_scan_unlimited"/>
      <remap from="~map" to="/static_obstacle_map_ref"/>

      <!-- relevant scan frames -->
      <param name="odom_frame" value="/odom"/>
      <param name="base_laser_frame" value="/base_range_sensor_link"/>

      <!-- defines minimum fitness for candidates for pose publishing -->
      <param name="icp_fitness_threshold" value="10"/>
   
      <!-- accept only scans one second old or younger -->
      <param name="age_threshold" value="20"/>
      <param name="update_age_threshold" value="1"/>

      <!-- thresholds over distance btw amcl icp pose to trigger pose publishing -->
      <!-- translation -->
      <param name="dist_threshold" value="0.01"/>
      <!-- rotation -->
      <param name="angle_threshold" value="0.01"/>
      <param name="angle_upper_threshold" value="1"/>

      <!-- various icp parameters -->
      <!-- consult with icp algorithm from pcl for details -->
      <param name="icp_inlier_threshold" value="0.1"/>
      <param name="icp_inlier_dist" value="0.1"/>
      <param name="icp_num_iter" value="500"/>

      <!-- who knows??? -->
      <param name="pose_covariance_trans" value="0.5"/>

      <!-- rate at which scans are taken -->
      <param name="scan_rate" value="4"/>
    </node>
  </group>

  <group if="$(eval arg('gazebo') == true)">
    <include file="$(find hsrb_gazebo_launch)/launch/include/hsrb_gazebo_common.xml" pass_all_args="true" >
      <arg name="map" default="$(find suturo_resources)/maps/$(arg map_name)" />
      <arg name="world_name" value="$(find suturo_resources)/gazebo_worlds/$(arg world)" />
      <arg name="robot_pos" value="-x $(arg robot_spawn_pose_x) -y $(arg robot_spawn_pose_y) -z $(arg robot_spawn_pose_z) -Y $(arg robot_spawn_rotation)"/>
      <arg name="ground_truth_xyz_offset" value="0.0\ 0.0\ 0.0" />
      <arg name="ground_truth_rpy_offset" value="0.0\ 0.0\ 0.0" />
      <arg name="rviz" value = "false" />
    </include>
  </group>

  <group if="$(eval arg('gazebo') == false)">
    <group if="$(eval arg('map_server') == true)">
      <node name="map_server" pkg="map_server" type="map_server" args="$(find suturo_resources)/maps/$(arg map_name)" />
    </group>
  </group>

  <group if="$(eval arg('publish_planning_hsr') == true)">
    <param name="hsr_description"
           command="$(find xacro)/xacro
                    '$(find hsr_description)/robots/hsrb4s.urdf.xacro'"/>
  </group>

  <!-- URDF OF THE ENVIORNMENT -->
  <group if="$(eval arg('publish_environment') == true)">
    <include file="$(find suturo_resources)/urdf/launch/urdf.launch" pass_all_args="true" >
      <arg name="world_urdf_yaml" value="$(arg env_model_yaml)"/>
    </include>
  </group>

  <!-- Show Rooms -->
  <group if="$(eval arg('show_rooms') == true)">
    <include file="$(find suturo_room_viz)/launch/suturo_room_viz.launch" pass_all_args="false" >      
    </include>
  </group>


  <!-- URDF OF THE ROBOT -->
  <group if="$(eval arg('publish_robot_description') == true)">
    <param name="robot_description"
           command="$(find xacro)/xacro --inorder 
                    '$(find hsrb_description)/robots/hsrb4s.urdf.xacro'"/>
  </group>

  <group if="$(eval arg('suturo_rviz') == true)">
    <node name="rviz" pkg="rviz" type="rviz" args="-d $(find suturo_resources)/rviz_configs/suturo.rviz" />
  </group>
  
  <node pkg="tf2_ros" type="buffer_server" name="tf_server" output="screen" />

</launch>
